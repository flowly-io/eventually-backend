type Checkpoint {
  description: String!
  done: Boolean!
}

type CapabilityInstance {
  _id: ID!
  name: String!
  description: String
  checkpoints: [Checkpoint]
  parent: Capability
}

type Event {
  _id: ID!
  name: String!
  description: String
  organisers: [User]
  audiences: [UserType]
  maxCapacity: Int
  capabilities: [CapabilityInstance]
  startDateTime: String
  endDateTime: String
}

input EventInput {
  name: String!
  description: String
  maxCapacity: Int
  startDateTime: String
  endDateTime: String
}

extend type Query {
  event(eventId: ID!): Event
  events: [Event]
  eventsByMe: [Event]
}

extend type Mutation {
  createEvent(event: EventInput!): Event
  deleteEvent(eventId: ID!): Int
  setOrganisers(eventId: ID!, organiserIds: [ID!]!): Event
  setAudiences(eventId: ID!, audiences: [UserType!]!): Event
  addCapability(eventId: ID!, capabilityId: ID!): Event
  removeCapability(eventId: ID!, capabilityInstanceId: ID!): Event
}
